#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Bubble Sort
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Selection Sort
void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        int temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}

// Insertion Sort
void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

// Shell Sort
void shellSort(int arr[], int n) {
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
            }
            arr[j] = temp;
        }
    }
}

// Quick Sort
// Forward declaration
int partition(int arr[], int low, int high);

// Quick Sort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return i + 1;
}

// Heap Sort
void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }
    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }
    for (int i = n - 1; i > 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

// Merge Sort
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Radix Sort
void countingSortByDigit(int arr[], int n, int exp) {
    int output[n];
    int count[10] = {0};

    for (int i = 0; i < n; i++) {
        count[(arr[i] / exp) % 10]++;
    }

    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}

void radixSort(int arr[], int n) {
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    for (int exp = 1; max / exp > 0; exp *= 10) {
        countingSortByDigit(arr, n, exp);
    }
}

// Main Function
int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original Array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Bubble Sort
    int bubbleArr[n];
    memcpy(bubbleArr, arr, sizeof(arr));
    bubbleSort(bubbleArr, n);
    printf("Bubble Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", bubbleArr[i]);
    }
    printf("\n");

    // Selection Sort
    int selectionArr[n];
    memcpy(selectionArr, arr, sizeof(arr));
    selectionSort(selectionArr, n);
    printf("Selection Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", selectionArr[i]);
    }
    printf("\n");

    // Insertion Sort
    int insertionArr[n];
    memcpy(insertionArr, arr, sizeof(arr));
    insertionSort(insertionArr, n);
    printf("Insertion Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", insertionArr[i]);
    }
    printf("\n");

    // Shell Sort
    int shellArr[n];
    memcpy(shellArr, arr, sizeof(arr));
    shellSort(shellArr, n);
    printf("Shell Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", shellArr[i]);
    }
    printf("\n");

    // Quick Sort
    int quickArr[n];
    memcpy(quickArr, arr, sizeof(arr));
    quickSort(quickArr, 0, n - 1);
    printf("Quick Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", quickArr[i]);
    }
    printf("\n");

    // Heap Sort
    int heapArr[n];
    memcpy(heapArr, arr, sizeof(arr));
    heapSort(heapArr, n);
    printf("Heap Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", heapArr[i]);
    }
    printf("\n");

    // Merge Sort
    int mergeArr[n];
    memcpy(mergeArr, arr, sizeof(arr));
    mergeSort(mergeArr, 0, n - 1);
    printf("Merge Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", mergeArr[i]);
    }
    printf("\n");

    // Radix Sort
    int radixArr[n];
    memcpy(radixArr, arr, sizeof(arr));
    radixSort(radixArr, n);
    printf("Radix Sorted: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", radixArr[i]);
    }
    printf("\n");

    return 0;
}
